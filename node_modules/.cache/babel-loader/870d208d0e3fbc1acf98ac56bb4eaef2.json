{"ast":null,"code":"var _jsxFileName = \"/Users/Joey/Desktop/Web Development/projects/smart-brain/src/context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport Clarifai from 'clarifai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  _s();\n\n  const [input, setInput] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [box, setBox] = useState({});\n  const [route, setRoute] = useState('signin');\n  const [isSignedIn, setIsSignedIn] = useState(false);\n  const [user, setUser] = useState({\n    id: '',\n    name: '',\n    email: '',\n    entries: 0,\n    joined: ''\n  });\n  const app = new Clarifai.App({\n    apiKey: 'd6186f1a010f48c98f651ef226062c3f'\n  });\n\n  const calculateFaceLocation = data => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - clarifaiFace.right_col * width,\n      bottomRow: height - clarifaiFace.bottom_row * height\n    };\n  };\n\n  const displayFaceBox = box => {\n    setBox(box);\n  };\n\n  const onInputChange = e => {\n    setInput(e.target.value);\n  };\n\n  const onButtonClick = () => {\n    setImageUrl(input);\n    app.models.predict(Clarifai.FACE_DETECT_MODEL, input).then(response => {\n      if (response) {\n        fetch('http://localhost:3000/image', {\n          method: 'PUT',\n          headers: {\n            'Content-type': 'application/json'\n          },\n          body: JSON.stringify({\n            id: user.id\n          })\n        }).then(response => response.json()).then(count => {\n          setUser(Object.assign(user, {\n            entries: count\n          }));\n        });\n      }\n\n      displayFaceBox(calculateFaceLocation(response));\n    }).catch(err => console.log(err));\n  };\n\n  const onRouteChange = route => {\n    if (route === 'signin') {\n      setIsSignedIn(false);\n    } else if (route === 'home') {\n      setIsSignedIn(true);\n    }\n\n    setRoute(route);\n  };\n\n  const loadUser = data => {\n    setUser({\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      entries: data.entries,\n      joined: data.joined\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      input,\n      imageUrl,\n      onInputChange,\n      onButtonClick,\n      box,\n      route,\n      setRoute,\n      onRouteChange,\n      isSignedIn,\n      user,\n      loadUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AppProvider, \"zzu9qIKNV0xy+CS/YDeJUDzaI88=\");\n\n_c = AppProvider;\nexport const useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport default AppProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["/Users/Joey/Desktop/Web Development/projects/smart-brain/src/context.js"],"names":["React","useState","useContext","Clarifai","AppContext","createContext","AppProvider","children","input","setInput","imageUrl","setImageUrl","box","setBox","route","setRoute","isSignedIn","setIsSignedIn","user","setUser","id","name","email","entries","joined","app","App","apiKey","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","onInputChange","e","target","value","onButtonClick","models","predict","FACE_DETECT_MODEL","then","response","fetch","method","headers","body","JSON","stringify","json","count","Object","assign","catch","err","console","log","onRouteChange","loadUser","useGlobalContext"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport Clarifai from 'clarifai';\n\nconst AppContext = React.createContext();\n\nconst AppProvider = ({ children }) => {\n  const [input, setInput] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [box, setBox] = useState({});\n  const [route, setRoute] = useState('signin');\n  const [isSignedIn, setIsSignedIn] = useState(false);\n  const [user, setUser] = useState({\n    id: '',\n    name: '',\n    email: '',\n    entries: 0,\n    joined: '',\n  });\n\n  const app = new Clarifai.App({\n    apiKey: 'd6186f1a010f48c98f651ef226062c3f',\n  });\n\n  const calculateFaceLocation = (data) => {\n    const clarifaiFace =\n      data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - clarifaiFace.right_col * width,\n      bottomRow: height - clarifaiFace.bottom_row * height,\n    };\n  };\n\n  const displayFaceBox = (box) => {\n    setBox(box);\n  };\n\n  const onInputChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const onButtonClick = () => {\n    setImageUrl(input);\n    app.models\n      .predict(Clarifai.FACE_DETECT_MODEL, input)\n      .then((response) => {\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'PUT',\n            headers: { 'Content-type': 'application/json' },\n            body: JSON.stringify({\n              id: user.id,\n            }),\n          })\n            .then((response) => response.json())\n            .then((count) => {\n              setUser(Object.assign(user, { entries: count }));\n            });\n        }\n        displayFaceBox(calculateFaceLocation(response));\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const onRouteChange = (route) => {\n    if (route === 'signin') {\n      setIsSignedIn(false);\n    } else if (route === 'home') {\n      setIsSignedIn(true);\n    }\n    setRoute(route);\n  };\n\n  const loadUser = (data) => {\n    setUser({\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      entries: data.entries,\n      joined: data.joined,\n    });\n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        input,\n        imageUrl,\n        onInputChange,\n        onButtonClick,\n        box,\n        route,\n        setRoute,\n        onRouteChange,\n        isSignedIn,\n        user,\n        loadUser,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\n\nexport default AppProvider;\n"]},"metadata":{},"sourceType":"module"}